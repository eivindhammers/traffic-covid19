install.packages("RSAGA")
library(RSAGA)
install.packages("Rsagacmd")
sessionInfo()
library(Rsagacmd)
saga <- ssaga_gis()
saga <- saga_gis()
?saga$statistics_grid$zonal_grid_statistics()
library(sf)
nc <- read_sf(system.file("shape/nc.shp", package = "sf"))
library(raster)
library(sp)
library(Rsagacmd)
# create some example data
p <- raster(nrow=10, ncol=10)
p[] <- runif(ncell(p)) * 10
p <- rasterToPolygons(p, fun=function(x){x > 9})
r <- raster(nrow=100, ncol=100)
r[] <- runif(ncell(r))
# run zonal statistics using skew and pct functions
z.mean <- zonal.stats(x = p, y = r, stats = "mean")
z.mean.saga <- saga$shapes_grid$grid_statistics_for_polygons(r, p, naming = 0)
z.mean.saga$G01_MEAN == z.mean$mean.layer
(z.mean.saga$G01_MEAN - z.mean$mean.layer) / z.mean.saga$G01_MEAN
library(spatialEco)
# create some example data
p <- raster(nrow=10, ncol=10)
p[] <- runif(ncell(p)) * 10
p <- rasterToPolygons(p, fun=function(x){x > 9})
r <- raster(nrow=100, ncol=100)
r[] <- runif(ncell(r))
# run zonal statistics using skew and pct functions
z.mean <- zonal.stats(x = p, y = r, stats = "mean")
z.mean.saga <- saga$shapes_grid$grid_statistics_for_polygons(r, p, naming = 0)
z.mean.saga$G01_MEAN == z.mean$mean.layer
(z.mean.saga$G01_MEAN - z.mean$mean.layer) / z.mean.saga$G01_MEAN
library(raster)
library(sp)
library(Rsagacmd)
library(spatialEco)
# create some example data
p <- raster(nrow=10, ncol=10)
p[] <- runif(ncell(p)) * 10
p <- rasterToPolygons(p, fun=function(x){x > 9})
r <- raster(nrow=100, ncol=100)
r[] <- runif(ncell(r))
# run zonal statistics using skew and pct functions
z.mean <- zonal.stats(x = p, y = r, stats = "mean")
saga <- saga_gis()
z.mean.saga <- saga$shapes_grid$grid_statistics_for_polygons(r, p, naming = 0)
z.mean.saga$G01_MEAN == z.mean$mean.layer
(z.mean.saga$G01_MEAN - z.mean$mean.layer) / z.mean.saga$G01_MEAN
?extract()
raster::extract()
library(raster)
raster::extract()
?raster::extract()
?raster::extract
extract(r, p)
extract(r, p, fun = "mean")
extract(r, p, fun = mean)
library(raster)
library(sp)
library(Rsagacmd)
library(spatialEco)
# create some example data
p <- raster(nrow=10, ncol=10)
p[] <- runif(ncell(p)) * 10
p <- rasterToPolygons(p, fun=function(x){x > 9})
r <- raster(nrow=100, ncol=100)
r[] <- runif(ncell(r))
# run zonal statistics using skew and pct functions
z.mean <- zonal.stats(x = p, y = r, stats = "mean")
saga <- saga_gis()
z.mean.saga <- saga$shapes_grid$grid_statistics_for_polygons(r, p, naming = 0)
z.mean.saga$G01_MEAN == z.mean$mean.layer
(z.mean.saga$G01_MEAN - z.mean$mean.layer) / z.mean.saga$G01_MEAN
z.mean.raster <- extract(r, p, fun = mean)
z.mean.saga$G01_MEAN == z.mean$mean.layer ==2
z.mean.raster <- extract(r, p, fun = mean)
z.mean.raster
z.mean
z.mean.saga
z.mean.saga$G01_MEAN
z.mean.raster
z.mean
cbind(zmean, z.mean.saga, z.mean.raster)
cbind(zmean, z.mean.saga, z.mean.raster)
cbind(z.mean, z.mean.saga, z.mean.raster)
cbind(z.mean, z.mean.saga$G01_MEAN, z.mean.raster)
z.mean.saga <- saga$shapes_grid$grid_statistics_for_polygons(r, p, naming = 0, method = 1)
cbind(z.mean, z.mean.saga$G01_MEAN, z.mean.raster)
install.packages(c("boot", "class", "countrycode", "dbplyr", "dplyr", "foreign", "ggplot2", "haven", "httpuv", "jsonify", "KernSmooth", "lwgeom", "MASS", "nlme", "nnet", "pkgload", "rgdal", "rmarkdown", "spatial", "tidyr"))
install.packages("ballr")
library(ballr)
ballr::NBAPerGameAdvStatistics(2018)
install.packages(c("backports", "htmltools", "httpuv", "later", "lubridate", "lwgeom", "mvtnorm", "nngeo", "promises", "rgdal", "rms", "Rsagacmd", "sf", "spatialEco", "SpatialPack", "survival", "systemfonts", "units", "vctrs"))
install.packages("units")
install.packages("SpatialPack")
games <- ballr::NBAPerGameAdvStatistics(2018)
View(games)
ballr::NBAPlayerPerGameStats(games$link[1])
games <- ballr::NBAPerGameStatistics(2018)
?ballr::NBAPerGameAdvStatistics()
install.packages(c("broom", "cgal4h", "deldir", "exactextractr", "fs", "geojsonsf", "ggplot2", "htmlTable", "isoband", "jsonlite", "knitr", "openssl", "pillar", "pkgbuild", "processx", "quantreg", "raster", "Rcpp", "rgdal", "rlang", "rmarkdown", "sf", "shiny", "SpatialPack", "spData", "spdep", "stars", "svglite", "tabularaster", "tibble", "tinytex", "vctrs", "wk", "xfun", "XML"))
install.packages(c("broom", "deldir", "raster"))
remove.packages("Rcpp")
install.packages(c("Rcpp"), type = "source")
install.packages(c("broom", "deldir", "raster"))
setwd("GitHub/traffic-covid19/")
install.packages("rgrass7")
library(rgrass7)
initGRASS(gisBase = "/Applications/QGIS3.14.app/Contents/Resources/grass7", home = tempdir())
library(ghql)
library(tidyverse)
library(jsonlite)
library(glue)
library(progress)
library(lubridate)
library(ggplot2)
library(sf)
setwd("GitHub/traffic-covid19/")
munics <- read_sf("Kommuner.geojson")
execGRASS("v.generalize", input = munics)
execGRASS("v.generalize", input = munics, method = "douglad")
execGRASS("v.generalize", input = munics, method = "douglas")
execGRASS("v.generalize", input = munics, method = "douglas", output = "regions_simpl", threshold = "1000")
execGRASS("v.generalize", input = "munics", method = "douglas", output = "regions_simpl", threshold = "1000")
execGRASS("v.generalize", input = st_geometry(munics), method = "douglas", output = "regions_simpl", threshold = "1000")
writeVECT(regions, "regions", v.in.ogr_flags="o")
writeVECT(munics, "munics", v.in.ogr_flags="o")
execGRASS("v.generalize", input = "munics", method = "douglas", output = "regions_simpl", threshold = "1000")
initGRASS(gisBase = "/Applications/QGIS3.14.app/Contents/Resources/grass7", home = getwd())
initGRASS(gisBase = "/Applications/QGIS3.14.app/Contents/Resources/grass7", home = getwd(), override = TRUEÂ¨)
initGRASS(gisBase = "/Applications/QGIS3.14.app/Contents/Resources/grass7", home = getwd(), override = TRUE)
writeVECT(munics, "munics", v.in.ogr_flags="o")
initGRASS(gisBase = "/Applications/QGIS3.14.app/Contents/Resources/grass7", home = getwd(), gisDbase = getwd(), override = TRUE)
writeVECT(munics, "munics", v.in.ogr_flags="o")
execGRASS("v.generalize", input = "munics", method = "douglas", output = "regions_simpl", threshold = "1000")
use_sf()
execGRASS("v.generalize", input = "munics", method = "douglas", output = "regions_simpl", threshold = "1000")
execGRASS("v.generalize", input = munics, method = "douglas", output = "regions_simpl", threshold = "1000")
writeVECT(munics, "munics", v.in.ogr_flags="o")
writeVECT(munics, "munics", v.in.ogr_flags="o", v.in.ogr_flags = "overwrite")
writeVECT(munics, "munics", v.in.ogr_flags="o", v.in.ogr_flags = c("o", "overwrite"))
writeVECT(munics, "munics", v.in.ogr_flags="o", v.in.ogr_flags = c("o", "overwrite", "quiet"))
writeVECT(munics, "munics", v.in.ogr_flags = c("o", "overwrite", "quiet"))
execGRASS("v.generalize", input = "munics", method = "douglas", output = "regions_simpl", threshold = "1000")
execGRASS("v.generalize", input = "munics", method = "douglas", output = "regions_simpl", threshold = 1000)
execGRASS("v.generalize", input = "munics", method = "douglas", output = "regions_simpl", threshold = 500)
writeVECT(munics, "munics", v.in.ogr_flags = c("o", "overwrite", "quiet"), snap = 1)
execGRASS("v.generalize", input = "munics", method = "douglas", output = "regions_simpl", threshold = 500)
execGRASS("v.generalize", input = "munics", method = "douglas", output = "regions_simpl", threshold = 500, flags = "--overwrite")
execGRASS("v.generalize", input = "munics", method = "douglas", output = "regions_simpl", threshold = 500, flags = "overwrite")
execGRASS("v.generalize", input = "munics", method = "douglas", output = "regions_simpl", threshold = 5000, flags = "overwrite")
execGRASS("v.generalize", input = "munics", method = "douglas", output = "regions_simpl", threshold = 10000, flags = "overwrite")
execGRASS("v.generalize", input = "munics", method = "douglas", output = "regions_simpl", threshold = 300, flags = "overwrite")
readVECT("regions_simpl")
test <- readVECT("regions_simpl")
test %>% group_by(kommunenummer) %>% aggregate()
library(sf)
test %>% group_by(kommunenummer) %>% aggregate()
test %>% aggregate(by = "kommunenummer")
test %>% aggregate(by = "kommunenummer", FUN = "first")
as.data.frame(munics[, "geom"])
as.data.frame(munics[, "geometry"])
as.data.frame(munics[, "navn"])
as.data.frame(munics[, "navn"])[, 1]
munics$navn
munics$`navn`
nc
system.file("nc")
system.file("nc", package = "sf")
test <- system.file("nc", package = "sf")
read_sf(system.file("nc", package = "sf"))
test <- system.file("nc.shp", package = "sf")
read_sf(system.file("nc.shp", package = "sf"))
read_sf(system.file("shape/nc.shp", package = "sf"))
test <- read_sf(system.file("shape/nc.shp", package = "sf"))
test <- read_sf(system.file("shape/nc.shp", package = "sf")) %>% mutate(test = 1)
test <- read_sf(system.file("shape/nc.shp", package = "sf")) %>% mutate(lastcol = TRUE)
test <- read_sf(system.file("shape/nc.shp", package = "sf")) %>% mutate(lastcol = 1)
test <- read_sf(system.file("shape/nc.shp", package = "sf")) %>% mutate(lastcol = 1)
test <- read_sf(system.file("shape/nc.shp", package = "sf")) dplyr::%>% mutate(lastcol = 1)
%/%
%/%()
read_sf(system.file("shape/nc.shp", package = "sf")) %>% mutate(lastcol = 1)
dplyr::mutate(read_sf(system.file("shape/nc.shp", package = "sf")), lastcol = 1)
dplyr::mutate(sf::read_sf(system.file("shape/nc.shp", package = "sf")), lastcol = 1)
dplyr::last_col(dplyr::mutate(sf::read_sf(system.file("shape/nc.shp", package = "sf")), lastcol = 1) )
